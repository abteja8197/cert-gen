{"version":3,"sources":["logo.svg","Components/Header.js","Components/Stepper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","aria-haspopup","aria-labelledby","useStyles","makeStyles","theme","root","width","button","marginRight","spacing","instructions","marginTop","marginBottom","HorizontalLinearStepper","classes","React","useState","activeStep","setActiveStep","Set","skipped","setSkipped","steps","isStepOptional","step","isStepSkipped","has","Stepper","map","label","index","stepProps","labelProps","optional","Typography","variant","completed","Step","key","StepLabel","length","Button","onClick","getStepContent","disabled","prevActiveStep","color","Error","prevSkipped","newSkipped","values","add","delete","App","Boolean","window","location","hostname","match","browserHistory","createBrowserHistory","ReactDOM","render","history","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.19fd249e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nfunction Header() {\r\n    return (\r\n        <div className=\"Header\">\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                <a className=\"navbar-brand\" href=\"#\">Navbar</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\r\n                    <ul className=\"navbar-nav\">\r\n                        <li className=\"nav-item active\">\r\n                            <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"#\">Features</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"#\">Pricing</a>\r\n                        </li>\r\n                        <li className=\"nav-item dropdown\">\r\n                            <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                Dropdown link</a>\r\n                            <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdownMenuLink\">\r\n                                <a className=\"dropdown-item\" href=\"#\">Action</a>\r\n                                <a className=\"dropdown-item\" href=\"#\">Another action</a>\r\n                                <a className=\"dropdown-item\" href=\"#\">Something else here</a>\r\n                            </div>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    button: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    instructions: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n}));\r\n\r\nfunction getSteps() {\r\n    return ['Select Template', 'Fill Details', 'Preview', 'Download'];\r\n}\r\n\r\nfunction getStepContent(step) {\r\n    switch (step) {\r\n        case 0:\r\n            return 'Select from one of the following Templates';\r\n        case 1:\r\n            return 'Fill the details';\r\n        case 2:\r\n            return 'Here is the preview of the Certifate';\r\n        case 3:\r\n            return 'Click here to Download';\r\n        default:\r\n            return 'Unknown step';\r\n    }\r\n}\r\n\r\nexport default function HorizontalLinearStepper() {\r\n    const classes = useStyles();\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const [skipped, setSkipped] = React.useState(new Set());\r\n    const steps = getSteps();\r\n\r\n    const isStepOptional = step => {\r\n        return step === 1;\r\n    };\r\n\r\n    const isStepSkipped = step => {\r\n        return skipped.has(step);\r\n    };\r\n\r\n    const handleNext = () => {\r\n        let newSkipped = skipped;\r\n        if (isStepSkipped(activeStep)) {\r\n            newSkipped = new Set(newSkipped.values());\r\n            newSkipped.delete(activeStep);\r\n        }\r\n\r\n        setActiveStep(prevActiveStep => prevActiveStep + 1);\r\n        setSkipped(newSkipped);\r\n    };\r\n\r\n    const handleBack = () => {\r\n        setActiveStep(prevActiveStep => prevActiveStep - 1);\r\n    };\r\n\r\n    const handleSkip = () => {\r\n        if (!isStepOptional(activeStep)) {\r\n            // You probably want to guard against something like this,\r\n            // it should never occur unless someone's actively trying to break something.\r\n            throw new Error(\"You can't skip a step that isn't optional.\");\r\n        }\r\n\r\n        setActiveStep(prevActiveStep => prevActiveStep + 1);\r\n        setSkipped(prevSkipped => {\r\n            const newSkipped = new Set(prevSkipped.values());\r\n            newSkipped.add(activeStep);\r\n            return newSkipped;\r\n        });\r\n    };\r\n\r\n    const handleReset = () => {\r\n        setActiveStep(0);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Stepper activeStep={activeStep}>\r\n                {steps.map((label, index) => {\r\n                    const stepProps = {};\r\n                    const labelProps = {};\r\n                    if (isStepOptional(index)) {\r\n                        labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\r\n                    }\r\n                    if (isStepSkipped(index)) {\r\n                        stepProps.completed = false;\r\n                    }\r\n                    return (\r\n                        <Step key={label} {...stepProps}>\r\n                            <StepLabel {...labelProps}>{label}</StepLabel>\r\n                        </Step>\r\n                    );\r\n                })}\r\n            </Stepper>\r\n            <div>\r\n                {activeStep === steps.length ? (\r\n                    <div>\r\n                        <Typography className={classes.instructions}>\r\n                            All steps completed - you&apos;re finished\r\n            </Typography>\r\n                        <Button onClick={handleReset} className={classes.button}>\r\n                            Reset\r\n            </Button>\r\n                    </div>\r\n                ) : (\r\n                        <div>\r\n                            <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\r\n                            <div>\r\n                                <Button disabled={activeStep === 0} onClick={handleBack} className={classes.button}>\r\n                                    Back\r\n              </Button>\r\n                                {isStepOptional(activeStep) && (\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={handleSkip}\r\n                                        className={classes.button}\r\n                                    >\r\n                                        Skip\r\n                </Button>\r\n                                )}\r\n\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={handleNext}\r\n                                    className={classes.button}\r\n                                >\r\n                                    {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './Components/Header'\n\nimport Steppercomponent from './Components/Stepper'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Steppercomponent />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Router, Route, Link, IndexRoute } from 'react-router';\nimport createBrowserHistory from 'history/createBrowserHistory.js';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst browserHistory = createBrowserHistory();\n\nReactDOM.render((\n    <Router history={browserHistory}>\n        <Route path=\"/\" component={App}>\n            {/* <IndexRoute component = {Home} />\n          <Route path = \"home\" component = {Home} />\n          <Route path = \"about\" component = {About} />\n          <Route path = \"contact\" component = {Contact} /> */}\n        </Route>\n    </Router>\n), document.getElementById('root'))\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}